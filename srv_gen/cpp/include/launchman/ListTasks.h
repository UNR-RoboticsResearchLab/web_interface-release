/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-web-interface-0.5.0/debian/ros-groovy-web-interface/opt/ros/groovy/stacks/web_interface/launchman/srv/ListTasks.srv */
#ifndef LAUNCHMAN_SERVICE_LISTTASKS_H
#define LAUNCHMAN_SERVICE_LISTTASKS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace launchman
{
template <class ContainerAllocator>
struct ListTasksRequest_ {
  typedef ListTasksRequest_<ContainerAllocator> Type;

  ListTasksRequest_()
  {
  }

  ListTasksRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::launchman::ListTasksRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::ListTasksRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ListTasksRequest
typedef  ::launchman::ListTasksRequest_<std::allocator<void> > ListTasksRequest;

typedef boost::shared_ptr< ::launchman::ListTasksRequest> ListTasksRequestPtr;
typedef boost::shared_ptr< ::launchman::ListTasksRequest const> ListTasksRequestConstPtr;



template <class ContainerAllocator>
struct ListTasksResponse_ {
  typedef ListTasksResponse_<ContainerAllocator> Type;

  ListTasksResponse_()
  : tasks()
  {
  }

  ListTasksResponse_(const ContainerAllocator& _alloc)
  : tasks(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _tasks_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  tasks;


  typedef boost::shared_ptr< ::launchman::ListTasksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::ListTasksResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ListTasksResponse
typedef  ::launchman::ListTasksResponse_<std::allocator<void> > ListTasksResponse;

typedef boost::shared_ptr< ::launchman::ListTasksResponse> ListTasksResponsePtr;
typedef boost::shared_ptr< ::launchman::ListTasksResponse const> ListTasksResponseConstPtr;


struct ListTasks
{

typedef ListTasksRequest Request;
typedef ListTasksResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ListTasks
} // namespace launchman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::ListTasksRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::ListTasksRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::ListTasksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::launchman::ListTasksRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::ListTasksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/ListTasksRequest";
  }

  static const char* value(const  ::launchman::ListTasksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::ListTasksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::launchman::ListTasksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::launchman::ListTasksRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::ListTasksResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::ListTasksResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::ListTasksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e23a0a55cd0f3fcb9989be6ceff0145";
  }

  static const char* value(const  ::launchman::ListTasksResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8e23a0a55cd0f3fcULL;
  static const uint64_t static_value2 = 0xb9989be6ceff0145ULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::ListTasksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/ListTasksResponse";
  }

  static const char* value(const  ::launchman::ListTasksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::ListTasksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] tasks\n\
\n\
\n\
";
  }

  static const char* value(const  ::launchman::ListTasksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::ListTasksRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListTasksRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::ListTasksResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tasks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListTasksResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<launchman::ListTasks> {
  static const char* value() 
  {
    return "8e23a0a55cd0f3fcb9989be6ceff0145";
  }

  static const char* value(const launchman::ListTasks&) { return value(); } 
};

template<>
struct DataType<launchman::ListTasks> {
  static const char* value() 
  {
    return "launchman/ListTasks";
  }

  static const char* value(const launchman::ListTasks&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<launchman::ListTasksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e23a0a55cd0f3fcb9989be6ceff0145";
  }

  static const char* value(const launchman::ListTasksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<launchman::ListTasksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/ListTasks";
  }

  static const char* value(const launchman::ListTasksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<launchman::ListTasksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e23a0a55cd0f3fcb9989be6ceff0145";
  }

  static const char* value(const launchman::ListTasksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<launchman::ListTasksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/ListTasks";
  }

  static const char* value(const launchman::ListTasksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LAUNCHMAN_SERVICE_LISTTASKS_H


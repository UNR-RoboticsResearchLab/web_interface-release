/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-web-interface-0.5.0/debian/ros-groovy-web-interface/opt/ros/groovy/stacks/web_interface/launchman/srv/StopTask.srv */
#ifndef LAUNCHMAN_SERVICE_STOPTASK_H
#define LAUNCHMAN_SERVICE_STOPTASK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace launchman
{
template <class ContainerAllocator>
struct StopTaskRequest_ {
  typedef StopTaskRequest_<ContainerAllocator> Type;

  StopTaskRequest_()
  : taskid()
  , username()
  {
  }

  StopTaskRequest_(const ContainerAllocator& _alloc)
  : taskid(_alloc)
  , username(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  taskid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _username_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  username;


  typedef boost::shared_ptr< ::launchman::StopTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::StopTaskRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StopTaskRequest
typedef  ::launchman::StopTaskRequest_<std::allocator<void> > StopTaskRequest;

typedef boost::shared_ptr< ::launchman::StopTaskRequest> StopTaskRequestPtr;
typedef boost::shared_ptr< ::launchman::StopTaskRequest const> StopTaskRequestConstPtr;



template <class ContainerAllocator>
struct StopTaskResponse_ {
  typedef StopTaskResponse_<ContainerAllocator> Type;

  StopTaskResponse_()
  : status()
  {
  }

  StopTaskResponse_(const ContainerAllocator& _alloc)
  : status(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;


  typedef boost::shared_ptr< ::launchman::StopTaskResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::StopTaskResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StopTaskResponse
typedef  ::launchman::StopTaskResponse_<std::allocator<void> > StopTaskResponse;

typedef boost::shared_ptr< ::launchman::StopTaskResponse> StopTaskResponsePtr;
typedef boost::shared_ptr< ::launchman::StopTaskResponse const> StopTaskResponseConstPtr;


struct StopTask
{

typedef StopTaskRequest Request;
typedef StopTaskResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StopTask
} // namespace launchman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::StopTaskRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::StopTaskRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::StopTaskRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f90254a4a4912432fb92a8e890bdfbcd";
  }

  static const char* value(const  ::launchman::StopTaskRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf90254a4a4912432ULL;
  static const uint64_t static_value2 = 0xfb92a8e890bdfbcdULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::StopTaskRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StopTaskRequest";
  }

  static const char* value(const  ::launchman::StopTaskRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::StopTaskRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string taskid\n\
string username\n\
\n\
";
  }

  static const char* value(const  ::launchman::StopTaskRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::StopTaskResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::StopTaskResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::StopTaskResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const  ::launchman::StopTaskResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4fe5af303955c287ULL;
  static const uint64_t static_value2 = 0x688e7347e9b00278ULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::StopTaskResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StopTaskResponse";
  }

  static const char* value(const  ::launchman::StopTaskResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::StopTaskResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string status\n\
\n\
";
  }

  static const char* value(const  ::launchman::StopTaskResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::StopTaskRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.taskid);
    stream.next(m.username);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StopTaskRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::StopTaskResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StopTaskResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<launchman::StopTask> {
  static const char* value() 
  {
    return "a7f7c2a0ff94dc94508b68c526bc0b69";
  }

  static const char* value(const launchman::StopTask&) { return value(); } 
};

template<>
struct DataType<launchman::StopTask> {
  static const char* value() 
  {
    return "launchman/StopTask";
  }

  static const char* value(const launchman::StopTask&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<launchman::StopTaskRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a7f7c2a0ff94dc94508b68c526bc0b69";
  }

  static const char* value(const launchman::StopTaskRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<launchman::StopTaskRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StopTask";
  }

  static const char* value(const launchman::StopTaskRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<launchman::StopTaskResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a7f7c2a0ff94dc94508b68c526bc0b69";
  }

  static const char* value(const launchman::StopTaskResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<launchman::StopTaskResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StopTask";
  }

  static const char* value(const launchman::StopTaskResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LAUNCHMAN_SERVICE_STOPTASK_H


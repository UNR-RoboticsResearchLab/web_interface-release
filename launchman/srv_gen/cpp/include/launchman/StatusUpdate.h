/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-web-interface-0.5.0/debian/ros-groovy-web-interface/opt/ros/groovy/stacks/web_interface/launchman/srv/StatusUpdate.srv */
#ifndef LAUNCHMAN_SERVICE_STATUSUPDATE_H
#define LAUNCHMAN_SERVICE_STATUSUPDATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace launchman
{
template <class ContainerAllocator>
struct StatusUpdateRequest_ {
  typedef StatusUpdateRequest_<ContainerAllocator> Type;

  StatusUpdateRequest_()
  {
  }

  StatusUpdateRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::launchman::StatusUpdateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::StatusUpdateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StatusUpdateRequest
typedef  ::launchman::StatusUpdateRequest_<std::allocator<void> > StatusUpdateRequest;

typedef boost::shared_ptr< ::launchman::StatusUpdateRequest> StatusUpdateRequestPtr;
typedef boost::shared_ptr< ::launchman::StatusUpdateRequest const> StatusUpdateRequestConstPtr;



template <class ContainerAllocator>
struct StatusUpdateResponse_ {
  typedef StatusUpdateResponse_<ContainerAllocator> Type;

  StatusUpdateResponse_()
  : status()
  {
  }

  StatusUpdateResponse_(const ContainerAllocator& _alloc)
  : status(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;


  typedef boost::shared_ptr< ::launchman::StatusUpdateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::StatusUpdateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StatusUpdateResponse
typedef  ::launchman::StatusUpdateResponse_<std::allocator<void> > StatusUpdateResponse;

typedef boost::shared_ptr< ::launchman::StatusUpdateResponse> StatusUpdateResponsePtr;
typedef boost::shared_ptr< ::launchman::StatusUpdateResponse const> StatusUpdateResponseConstPtr;


struct StatusUpdate
{

typedef StatusUpdateRequest Request;
typedef StatusUpdateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StatusUpdate
} // namespace launchman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::StatusUpdateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::StatusUpdateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::StatusUpdateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::launchman::StatusUpdateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::StatusUpdateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StatusUpdateRequest";
  }

  static const char* value(const  ::launchman::StatusUpdateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::StatusUpdateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::launchman::StatusUpdateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::launchman::StatusUpdateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::StatusUpdateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::StatusUpdateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::StatusUpdateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const  ::launchman::StatusUpdateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4fe5af303955c287ULL;
  static const uint64_t static_value2 = 0x688e7347e9b00278ULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::StatusUpdateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StatusUpdateResponse";
  }

  static const char* value(const  ::launchman::StatusUpdateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::StatusUpdateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string status\n\
\n\
";
  }

  static const char* value(const  ::launchman::StatusUpdateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::StatusUpdateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StatusUpdateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::StatusUpdateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StatusUpdateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<launchman::StatusUpdate> {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const launchman::StatusUpdate&) { return value(); } 
};

template<>
struct DataType<launchman::StatusUpdate> {
  static const char* value() 
  {
    return "launchman/StatusUpdate";
  }

  static const char* value(const launchman::StatusUpdate&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<launchman::StatusUpdateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const launchman::StatusUpdateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<launchman::StatusUpdateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StatusUpdate";
  }

  static const char* value(const launchman::StatusUpdateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<launchman::StatusUpdateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4fe5af303955c287688e7347e9b00278";
  }

  static const char* value(const launchman::StatusUpdateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<launchman::StatusUpdateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/StatusUpdate";
  }

  static const char* value(const launchman::StatusUpdateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // LAUNCHMAN_SERVICE_STATUSUPDATE_H


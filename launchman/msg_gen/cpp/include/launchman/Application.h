/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-web-interface-0.5.0/debian/ros-groovy-web-interface/opt/ros/groovy/stacks/web_interface/launchman/msg/Application.msg */
#ifndef LAUNCHMAN_MESSAGE_APPLICATION_H
#define LAUNCHMAN_MESSAGE_APPLICATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace launchman
{
template <class ContainerAllocator>
struct Application_ {
  typedef Application_<ContainerAllocator> Type;

  Application_()
  : taskid()
  , name()
  , status()
  , icon()
  , provides()
  , depends()
  {
  }

  Application_(const ContainerAllocator& _alloc)
  : taskid(_alloc)
  , name(_alloc)
  , status(_alloc)
  , icon(_alloc)
  , provides(_alloc)
  , depends(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  taskid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _icon_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  icon;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _provides_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  provides;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _depends_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  depends;


  typedef boost::shared_ptr< ::launchman::Application_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::Application_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Application
typedef  ::launchman::Application_<std::allocator<void> > Application;

typedef boost::shared_ptr< ::launchman::Application> ApplicationPtr;
typedef boost::shared_ptr< ::launchman::Application const> ApplicationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::launchman::Application_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::launchman::Application_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace launchman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::Application_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::Application_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::Application_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f6a16a9c297a883b8eb15bf869d26eca";
  }

  static const char* value(const  ::launchman::Application_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf6a16a9c297a883bULL;
  static const uint64_t static_value2 = 0x8eb15bf869d26ecaULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::Application_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/Application";
  }

  static const char* value(const  ::launchman::Application_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::Application_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string taskid\n\
string name\n\
string status\n\
string icon\n\
string provides\n\
string depends\n\
\n\
";
  }

  static const char* value(const  ::launchman::Application_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::Application_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.taskid);
    stream.next(m.name);
    stream.next(m.status);
    stream.next(m.icon);
    stream.next(m.provides);
    stream.next(m.depends);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Application_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::launchman::Application_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::launchman::Application_<ContainerAllocator> & v) 
  {
    s << indent << "taskid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskid);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "icon: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.icon);
    s << indent << "provides: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.provides);
    s << indent << "depends: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.depends);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LAUNCHMAN_MESSAGE_APPLICATION_H


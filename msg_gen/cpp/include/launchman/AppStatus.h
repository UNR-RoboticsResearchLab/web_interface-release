/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-web-interface-0.5.0/debian/ros-groovy-web-interface/opt/ros/groovy/stacks/web_interface/launchman/msg/AppStatus.msg */
#ifndef LAUNCHMAN_MESSAGE_APPSTATUS_H
#define LAUNCHMAN_MESSAGE_APPSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "launchman/Application.h"

namespace launchman
{
template <class ContainerAllocator>
struct AppStatus_ {
  typedef AppStatus_<ContainerAllocator> Type;

  AppStatus_()
  : active()
  {
  }

  AppStatus_(const ContainerAllocator& _alloc)
  : active(_alloc)
  {
  }

  typedef std::vector< ::launchman::Application_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::launchman::Application_<ContainerAllocator> >::other >  _active_type;
  std::vector< ::launchman::Application_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::launchman::Application_<ContainerAllocator> >::other >  active;


  typedef boost::shared_ptr< ::launchman::AppStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::launchman::AppStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AppStatus
typedef  ::launchman::AppStatus_<std::allocator<void> > AppStatus;

typedef boost::shared_ptr< ::launchman::AppStatus> AppStatusPtr;
typedef boost::shared_ptr< ::launchman::AppStatus const> AppStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::launchman::AppStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::launchman::AppStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace launchman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::launchman::AppStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::launchman::AppStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::launchman::AppStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8a2d696a9a11a9fb77b5416e878dcad0";
  }

  static const char* value(const  ::launchman::AppStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8a2d696a9a11a9fbULL;
  static const uint64_t static_value2 = 0x77b5416e878dcad0ULL;
};

template<class ContainerAllocator>
struct DataType< ::launchman::AppStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "launchman/AppStatus";
  }

  static const char* value(const  ::launchman::AppStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::launchman::AppStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Application[] active\n\
\n\
================================================================================\n\
MSG: launchman/Application\n\
string taskid\n\
string name\n\
string status\n\
string icon\n\
string provides\n\
string depends\n\
\n\
";
  }

  static const char* value(const  ::launchman::AppStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::launchman::AppStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.active);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AppStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::launchman::AppStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::launchman::AppStatus_<ContainerAllocator> & v) 
  {
    s << indent << "active[]" << std::endl;
    for (size_t i = 0; i < v.active.size(); ++i)
    {
      s << indent << "  active[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::launchman::Application_<ContainerAllocator> >::stream(s, indent + "    ", v.active[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LAUNCHMAN_MESSAGE_APPSTATUS_H

